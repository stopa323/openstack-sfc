---
version: '2.0'

ppg_scale_up:
  description: Scale Neutron PortPairGroup.
  type: direct

  input:
    - instance_id

  tasks:
    get_vm_port:
      action: neutron.list_ports
      publish:
        vm_port: '{{ task("get_vm_port").result.ports | selectattr("device_id", "equalto", _.instance_id) | map(attribute="id") | list | first }}'
      on-success:
        - get_sfc_port_pairs
        - get_instance_ppg

    get_sfc_port_pairs:
      action: neutron.list_sfc_port_pairs
      publish:
        sfc_pairs: '{{ task("get_sfc_port_pairs").result.port_pairs | selectattr("ingress", "equalto", _.vm_port) | map(attribute="id") | list | first }}'
      on-success:
        - rendezvous_point

    get_instance_ppg:
      action: nova.servers_get
      input:
        server: '{{ _.instance_id }}'
      publish:
        ppg_name: '{{ task("get_instance_ppg").result.metadata.ppg }}'
      on-success:
        - get_current_port_pair_in_group

    get_current_port_pair_in_group:
      action: neutron.show_sfc_port_pair_group
      input:
        port_pair_group: '{{ _.ppg_name }}'
      publish:
        current_port_pairs: '{{ task("get_current_port_pair_in_group").result.port_pair_group.port_pairs }}'
      on-success:
        - rendezvous_point

    rendezvous_point:
      join: all
      on-success:
        - update_port_pair_group

    update_port_pair_group:
      action: neutron.update_sfc_port_pair_group
      input:
        port_pair_group: '{{ _.ppg_name }}'
        body:
          port_pair_group:
            #TODO: should filter out duplicates but `unique` filter not working
            port_pairs: '{{ [_.sfc_pairs] + _.current_port_pairs }}'
